
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001961  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009dd  00000000  00000000  0000238d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e0a  00000000  00000000  00002d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00003b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f6  00000000  00000000  00003dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000778  00000000  00000000  000042ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004a46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0b 01       	movw	r0, r22
  56:	1c 01       	movw	r2, r24
  58:	2d 01       	movw	r4, r26
  5a:	3e 01       	movw	r6, r28
  5c:	4f 01       	movw	r8, r30
  5e:	60 01       	movw	r12, r0
  60:	71 01       	movw	r14, r2
  62:	82 01       	movw	r16, r4
  64:	93 01       	movw	r18, r6
  66:	a4 01       	movw	r20, r8
  68:	cc 01       	movw	r24, r24
  6a:	dd 01       	movw	r26, r26
  6c:	ee 01       	movw	r28, r28
  6e:	ff 01       	movw	r30, r30
  70:	10 02       	muls	r17, r16
  72:	21 02       	muls	r18, r17
  74:	32 02       	muls	r19, r18
  76:	43 02       	muls	r20, r19
  78:	54 02       	muls	r21, r20
  7a:	65 02       	muls	r22, r21

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	a0 e6       	ldi	r26, 0x60	; 96
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 36       	cpi	r26, 0x60	; 96
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 04 04 	jmp	0x808	; 0x808 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
extern u32 no_of_ov;
extern u8  rem_ticks;
extern u32 no_of_cm;
int main(void)
{
	LED_INIT(LED_0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_INIT>
	EEPROM_INIT();
  aa:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_INIT>
	
	SSD_INIT();
  ae:	0e 94 c2 00 	call	0x184	; 0x184 <SSD_INIT>
	u8 x = EEPROM_READ(0,6);
  b2:	66 e0       	ldi	r22, 0x06	; 6
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 8e 00 	call	0x11c	; 0x11c <EEPROM_READ>
  ba:	c8 2f       	mov	r28, r24
	

    while (1)
    {
		SSD_DISPLAY(x);
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SSD_DISPLAY>
		x++;
  c2:	cf 5f       	subi	r28, 0xFF	; 255
		EEPROM_WRITE(x,0,6);  // data,page number,byte number
  c4:	46 e0       	ldi	r20, 0x06	; 6
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	8c 2f       	mov	r24, r28
  ca:	0e 94 74 00 	call	0xe8	; 0xe8 <EEPROM_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x30>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x3a>
  de:	00 00       	nop
  e0:	ed cf       	rjmp	.-38     	; 0xbc <main+0x18>

000000e2 <EEPROM_INIT>:
#include "I2C.h"
#include "LED.h"

void EEPROM_INIT(void)
{
	I2C_INIT();
  e2:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_INIT>
  e6:	08 95       	ret

000000e8 <EEPROM_WRITE>:
}
void EEPROM_WRITE(u8 data,u8 page,u8 byte)
{
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	if((page < 8) && (byte < 256))
  ee:	68 30       	cpi	r22, 0x08	; 8
  f0:	88 f4       	brcc	.+34     	; 0x114 <EEPROM_WRITE+0x2c>
  f2:	14 2f       	mov	r17, r20
  f4:	c6 2f       	mov	r28, r22
  f6:	d8 2f       	mov	r29, r24
	{
		I2C_START_CONDITION();
  f8:	0e 94 9c 03 	call	0x738	; 0x738 <I2C_START_CONDITION>
		I2C_SEND_SLAVE_ADDRESS_WRITE(0x50 | page);
  fc:	8c 2f       	mov	r24, r28
  fe:	80 65       	ori	r24, 0x50	; 80
 100:	0e 94 aa 03 	call	0x754	; 0x754 <I2C_SEND_SLAVE_ADDRESS_WRITE>
		I2C_SEND_BYTE(byte);
 104:	81 2f       	mov	r24, r17
 106:	0e 94 c5 03 	call	0x78a	; 0x78a <I2C_SEND_BYTE>
		I2C_SEND_BYTE(data);
 10a:	8d 2f       	mov	r24, r29
 10c:	0e 94 c5 03 	call	0x78a	; 0x78a <I2C_SEND_BYTE>
		I2C_STOP_CONDITION();
 110:	0e 94 f7 03 	call	0x7ee	; 0x7ee <I2C_STOP_CONDITION>
	}      
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	08 95       	ret

0000011c <EEPROM_READ>:
u8   EEPROM_READ(u8 page,u8 byte)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
	u8 data = 0;
	if((page < 8) && (byte < 256))
 120:	88 30       	cpi	r24, 0x08	; 8
 122:	b0 f4       	brcc	.+44     	; 0x150 <EEPROM_READ+0x34>
 124:	d6 2f       	mov	r29, r22
 126:	c8 2f       	mov	r28, r24
	{
		I2C_START_CONDITION();
 128:	0e 94 9c 03 	call	0x738	; 0x738 <I2C_START_CONDITION>
		I2C_SEND_SLAVE_ADDRESS_WRITE(0x50 | page);
 12c:	c0 65       	ori	r28, 0x50	; 80
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 aa 03 	call	0x754	; 0x754 <I2C_SEND_SLAVE_ADDRESS_WRITE>
		I2C_SEND_BYTE(byte);
 134:	8d 2f       	mov	r24, r29
 136:	0e 94 c5 03 	call	0x78a	; 0x78a <I2C_SEND_BYTE>
		I2C_REPEATED_START();
 13a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <I2C_REPEATED_START>
		I2C_SEND_SLAVE_ADDRESS_READ(0x50 | page);
 13e:	8c 2f       	mov	r24, r28
 140:	0e 94 b7 03 	call	0x76e	; 0x76e <I2C_SEND_SLAVE_ADDRESS_READ>
		data = I2C_REC_BYTE();
 144:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <I2C_REC_BYTE>
 148:	c8 2f       	mov	r28, r24
		I2C_STOP_CONDITION();
 14a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <I2C_STOP_CONDITION>
 14e:	01 c0       	rjmp	.+2      	; 0x152 <EEPROM_READ+0x36>
		I2C_STOP_CONDITION();
	}      
}
u8   EEPROM_READ(u8 page,u8 byte)
{
	u8 data = 0;
 150:	c0 e0       	ldi	r28, 0x00	; 0
		I2C_SEND_SLAVE_ADDRESS_READ(0x50 | page);
		data = I2C_REC_BYTE();
		I2C_STOP_CONDITION();
	}	
	return data;
 152:	8c 2f       	mov	r24, r28
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <LED_INIT>:
#include "LED_CFG.h"
#include "DIO.h"

void LED_INIT(u8 x)
{
	switch (x)
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	49 f0       	breq	.+18     	; 0x170 <LED_INIT+0x16>
 15e:	18 f0       	brcs	.+6      	; 0x166 <LED_INIT+0xc>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	59 f0       	breq	.+22     	; 0x17a <LED_INIT+0x20>
 164:	08 95       	ret
	{
		case 0:
		PIN_MODE(LED_0_PIN,OUTPUT);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	86 e1       	ldi	r24, 0x16	; 22
 16a:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
		break;
 16e:	08 95       	ret
		case 1:
		PIN_MODE(LED_1_PIN,OUTPUT);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	8b e1       	ldi	r24, 0x1B	; 27
 174:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
		break;
 178:	08 95       	ret
		case 2:
		PIN_MODE(LED_2_PIN,OUTPUT);
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	81 e2       	ldi	r24, 0x21	; 33
 17e:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
 182:	08 95       	ret

00000184 <SSD_INIT>:
#define F_CPU 16000000
#include <util/delay.h>

void SSD_INIT(void)
{
	PIN_MODE(SSD_PIN_0,OUTPUT);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
	PIN_MODE(SSD_PIN_1,OUTPUT);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
	PIN_MODE(SSD_PIN_2,OUTPUT);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
	PIN_MODE(SSD_PIN_3,OUTPUT);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
	PIN_MODE(SSD_PIN_EN1,OUTPUT);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	8c e0       	ldi	r24, 0x0C	; 12
 1a8:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
	PIN_MODE(SSD_PIN_EN2,OUTPUT);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	8b e0       	ldi	r24, 0x0B	; 11
 1b0:	0e 94 90 02 	call	0x520	; 0x520 <PIN_MODE>
 1b4:	08 95       	ret

000001b6 <SSD_DISPLAY>:
}
void SSD_DISPLAY(u8 num)
{
 1b6:	8f 92       	push	r8
 1b8:	9f 92       	push	r9
 1ba:	af 92       	push	r10
 1bc:	bf 92       	push	r11
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	cf 93       	push	r28
	u8 num_1 = num % 10;
 1c8:	9d ec       	ldi	r25, 0xCD	; 205
 1ca:	89 9f       	mul	r24, r25
 1cc:	81 2c       	mov	r8, r1
 1ce:	11 24       	eor	r1, r1
 1d0:	c8 2c       	mov	r12, r8
 1d2:	c6 94       	lsr	r12
 1d4:	c6 94       	lsr	r12
 1d6:	c6 94       	lsr	r12
 1d8:	cc 0c       	add	r12, r12
 1da:	9c 2d       	mov	r25, r12
 1dc:	99 0f       	add	r25, r25
 1de:	99 0f       	add	r25, r25
 1e0:	c9 0e       	add	r12, r25
 1e2:	8c 19       	sub	r24, r12
	u8 num_2 = num / 10;
 1e4:	86 94       	lsr	r8
 1e6:	86 94       	lsr	r8
 1e8:	86 94       	lsr	r8
 1ea:	c2 e3       	ldi	r28, 0x32	; 50
	u8 i = 0;
	for(i=0;i<50;i++)
	{
		PIN_WRITE(SSD_PIN_EN1,HIGH);
		PIN_WRITE(SSD_PIN_EN2,LOW);
		switch(num_2)
 1ec:	91 2c       	mov	r9, r1
			break;							
		}
		_delay_ms(10);
		PIN_WRITE(SSD_PIN_EN1,LOW);
		PIN_WRITE(SSD_PIN_EN2,HIGH);
		switch(num_1)
 1ee:	c8 2e       	mov	r12, r24
 1f0:	d1 2c       	mov	r13, r1
	u8 num_2 = num / 10;
	
	u8 i = 0;
	for(i=0;i<50;i++)
	{
		PIN_WRITE(SSD_PIN_EN1,HIGH);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
		PIN_WRITE(SSD_PIN_EN2,LOW);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	8b e0       	ldi	r24, 0x0B	; 11
 1fe:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
		switch(num_2)
 202:	8a e0       	ldi	r24, 0x0A	; 10
 204:	88 16       	cp	r8, r24
 206:	91 04       	cpc	r9, r1
 208:	08 f0       	brcs	.+2      	; 0x20c <SSD_DISPLAY+0x56>
 20a:	ae c0       	rjmp	.+348    	; 0x368 <SSD_DISPLAY+0x1b2>
 20c:	f4 01       	movw	r30, r8
 20e:	e6 5d       	subi	r30, 0xD6	; 214
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__tablejump2__>
		{
			case 0:
			PIN_WRITE(SSD_PIN_0,LOW);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	87 e0       	ldi	r24, 0x07	; 7
 232:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 236:	98 c0       	rjmp	.+304    	; 0x368 <SSD_DISPLAY+0x1b2>
			case 1:
			PIN_WRITE(SSD_PIN_0,HIGH);
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	87 e0       	ldi	r24, 0x07	; 7
 254:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 258:	87 c0       	rjmp	.+270    	; 0x368 <SSD_DISPLAY+0x1b2>
			case 2:
			PIN_WRITE(SSD_PIN_0,LOW);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,HIGH);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;		
 27a:	76 c0       	rjmp	.+236    	; 0x368 <SSD_DISPLAY+0x1b2>
			case 3:
			PIN_WRITE(SSD_PIN_0,HIGH);
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,HIGH);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	87 e0       	ldi	r24, 0x07	; 7
 298:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;	
 29c:	65 c0       	rjmp	.+202    	; 0x368 <SSD_DISPLAY+0x1b2>
			case 4:
			PIN_WRITE(SSD_PIN_0,LOW);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	85 e0       	ldi	r24, 0x05	; 5
 2aa:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,HIGH);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	87 e0       	ldi	r24, 0x07	; 7
 2ba:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;	
 2be:	54 c0       	rjmp	.+168    	; 0x368 <SSD_DISPLAY+0x1b2>
			case 5:
			PIN_WRITE(SSD_PIN_0,HIGH);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	85 e0       	ldi	r24, 0x05	; 5
 2cc:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,HIGH);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;	
 2e0:	43 c0       	rjmp	.+134    	; 0x368 <SSD_DISPLAY+0x1b2>
			case 6:
			PIN_WRITE(SSD_PIN_0,LOW);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,HIGH);
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	85 e0       	ldi	r24, 0x05	; 5
 2ee:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,HIGH);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	87 e0       	ldi	r24, 0x07	; 7
 2fe:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 302:	32 c0       	rjmp	.+100    	; 0x368 <SSD_DISPLAY+0x1b2>
			case 7:
			PIN_WRITE(SSD_PIN_0,HIGH);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,HIGH);
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	85 e0       	ldi	r24, 0x05	; 5
 310:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,HIGH);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	86 e0       	ldi	r24, 0x06	; 6
 318:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	87 e0       	ldi	r24, 0x07	; 7
 320:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;	
 324:	21 c0       	rjmp	.+66     	; 0x368 <SSD_DISPLAY+0x1b2>
			case 8:
			PIN_WRITE(SSD_PIN_0,LOW);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	84 e0       	ldi	r24, 0x04	; 4
 32a:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,HIGH);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	87 e0       	ldi	r24, 0x07	; 7
 342:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;	
 346:	10 c0       	rjmp	.+32     	; 0x368 <SSD_DISPLAY+0x1b2>
			case 9:
			PIN_WRITE(SSD_PIN_0,HIGH);
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	85 e0       	ldi	r24, 0x05	; 5
 354:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,HIGH);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	87 e0       	ldi	r24, 0x07	; 7
 364:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	9c e9       	ldi	r25, 0x9C	; 156
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <SSD_DISPLAY+0x1b6>
 370:	00 c0       	rjmp	.+0      	; 0x372 <SSD_DISPLAY+0x1bc>
 372:	00 00       	nop
			break;	
			default:
			break;							
		}
		_delay_ms(10);
		PIN_WRITE(SSD_PIN_EN1,LOW);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	8c e0       	ldi	r24, 0x0C	; 12
 378:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
		PIN_WRITE(SSD_PIN_EN2,HIGH);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	8b e0       	ldi	r24, 0x0B	; 11
 380:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
		switch(num_1)
 384:	9a e0       	ldi	r25, 0x0A	; 10
 386:	c9 16       	cp	r12, r25
 388:	d1 04       	cpc	r13, r1
 38a:	08 f0       	brcs	.+2      	; 0x38e <SSD_DISPLAY+0x1d8>
 38c:	ae c0       	rjmp	.+348    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 38e:	f6 01       	movw	r30, r12
 390:	ec 5c       	subi	r30, 0xCC	; 204
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__tablejump2__>
		{
			case 0:
			PIN_WRITE(SSD_PIN_0,LOW);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	85 e0       	ldi	r24, 0x05	; 5
 3a4:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	87 e0       	ldi	r24, 0x07	; 7
 3b4:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 3b8:	98 c0       	rjmp	.+304    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 1:
			PIN_WRITE(SSD_PIN_0,HIGH);
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	85 e0       	ldi	r24, 0x05	; 5
 3c6:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	86 e0       	ldi	r24, 0x06	; 6
 3ce:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	87 e0       	ldi	r24, 0x07	; 7
 3d6:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 3da:	87 c0       	rjmp	.+270    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 2:
			PIN_WRITE(SSD_PIN_0,LOW);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	84 e0       	ldi	r24, 0x04	; 4
 3e0:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,HIGH);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	85 e0       	ldi	r24, 0x05	; 5
 3e8:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	86 e0       	ldi	r24, 0x06	; 6
 3f0:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	87 e0       	ldi	r24, 0x07	; 7
 3f8:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 3fc:	76 c0       	rjmp	.+236    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 3:
			PIN_WRITE(SSD_PIN_0,HIGH);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	84 e0       	ldi	r24, 0x04	; 4
 402:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,HIGH);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	85 e0       	ldi	r24, 0x05	; 5
 40a:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	86 e0       	ldi	r24, 0x06	; 6
 412:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	87 e0       	ldi	r24, 0x07	; 7
 41a:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 41e:	65 c0       	rjmp	.+202    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 4:
			PIN_WRITE(SSD_PIN_0,LOW);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,HIGH);
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	87 e0       	ldi	r24, 0x07	; 7
 43c:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 440:	54 c0       	rjmp	.+168    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 5:
			PIN_WRITE(SSD_PIN_0,HIGH);
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	84 e0       	ldi	r24, 0x04	; 4
 446:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,HIGH);
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 462:	43 c0       	rjmp	.+134    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 6:
			PIN_WRITE(SSD_PIN_0,LOW);
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	84 e0       	ldi	r24, 0x04	; 4
 468:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,HIGH);
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	85 e0       	ldi	r24, 0x05	; 5
 470:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,HIGH);
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	86 e0       	ldi	r24, 0x06	; 6
 478:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 484:	32 c0       	rjmp	.+100    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 7:
			PIN_WRITE(SSD_PIN_0,HIGH);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,HIGH);
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	85 e0       	ldi	r24, 0x05	; 5
 492:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,HIGH);
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	86 e0       	ldi	r24, 0x06	; 6
 49a:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,LOW);
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	87 e0       	ldi	r24, 0x07	; 7
 4a2:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 4a6:	21 c0       	rjmp	.+66     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 8:
			PIN_WRITE(SSD_PIN_0,LOW);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,HIGH);
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	87 e0       	ldi	r24, 0x07	; 7
 4c4:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			break;
 4c8:	10 c0       	rjmp	.+32     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			case 9:
			PIN_WRITE(SSD_PIN_0,HIGH);
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	84 e0       	ldi	r24, 0x04	; 4
 4ce:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_1,LOW);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	85 e0       	ldi	r24, 0x05	; 5
 4d6:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_2,LOW);
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	86 e0       	ldi	r24, 0x06	; 6
 4de:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
			PIN_WRITE(SSD_PIN_3,HIGH);
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	87 e0       	ldi	r24, 0x07	; 7
 4e6:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
 4ea:	8f e3       	ldi	r24, 0x3F	; 63
 4ec:	9c e9       	ldi	r25, 0x9C	; 156
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f4:	00 00       	nop
			break;
			default:
			break;
		}
		_delay_ms(10);	
		PIN_WRITE(SSD_PIN_EN1,LOW);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	8c e0       	ldi	r24, 0x0C	; 12
 4fa:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
		PIN_WRITE(SSD_PIN_EN2,LOW);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	8b e0       	ldi	r24, 0x0B	; 11
 502:	0e 94 13 03 	call	0x626	; 0x626 <PIN_WRITE>
 506:	c1 50       	subi	r28, 0x01	; 1
{
	u8 num_1 = num % 10;
	u8 num_2 = num / 10;
	
	u8 i = 0;
	for(i=0;i<50;i++)
 508:	09 f0       	breq	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50a:	73 ce       	rjmp	.-794    	; 0x1f2 <SSD_DISPLAY+0x3c>
		}
		_delay_ms(10);	
		PIN_WRITE(SSD_PIN_EN1,LOW);
		PIN_WRITE(SSD_PIN_EN2,LOW);
	}
 50c:	cf 91       	pop	r28
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	df 90       	pop	r13
 514:	cf 90       	pop	r12
 516:	bf 90       	pop	r11
 518:	af 90       	pop	r10
 51a:	9f 90       	pop	r9
 51c:	8f 90       	pop	r8
 51e:	08 95       	ret

00000520 <PIN_MODE>:
#include "REG.h"
#include "BIT_MATH.h"

void PIN_MODE(u8 x,u8 state)
{
	u8 pin  = x % 10;
 520:	9d ec       	ldi	r25, 0xCD	; 205
 522:	89 9f       	mul	r24, r25
 524:	91 2d       	mov	r25, r1
 526:	11 24       	eor	r1, r1
 528:	29 2f       	mov	r18, r25
 52a:	26 95       	lsr	r18
 52c:	26 95       	lsr	r18
 52e:	26 95       	lsr	r18
 530:	22 0f       	add	r18, r18
 532:	32 2f       	mov	r19, r18
 534:	33 0f       	add	r19, r19
 536:	33 0f       	add	r19, r19
 538:	23 0f       	add	r18, r19
 53a:	82 1b       	sub	r24, r18
 53c:	28 2f       	mov	r18, r24
	u8 port = x / 10;
 53e:	96 95       	lsr	r25
 540:	96 95       	lsr	r25
 542:	96 95       	lsr	r25
	switch(state)
 544:	66 23       	and	r22, r22
 546:	19 f0       	breq	.+6      	; 0x54e <PIN_MODE+0x2e>
 548:	61 30       	cpi	r22, 0x01	; 1
 54a:	c9 f1       	breq	.+114    	; 0x5be <PIN_MODE+0x9e>
 54c:	08 95       	ret
	{
		case INPUT:
		switch(port)
 54e:	91 30       	cpi	r25, 0x01	; 1
 550:	91 f0       	breq	.+36     	; 0x576 <PIN_MODE+0x56>
 552:	28 f0       	brcs	.+10     	; 0x55e <PIN_MODE+0x3e>
 554:	92 30       	cpi	r25, 0x02	; 2
 556:	d9 f0       	breq	.+54     	; 0x58e <PIN_MODE+0x6e>
 558:	93 30       	cpi	r25, 0x03	; 3
 55a:	29 f1       	breq	.+74     	; 0x5a6 <PIN_MODE+0x86>
 55c:	08 95       	ret
		{
			case 0:
			CLR_BIT(DDRA,pin);
 55e:	3a b3       	in	r19, 0x1a	; 26
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <PIN_MODE+0x4a>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	2a 95       	dec	r18
 56c:	e2 f7       	brpl	.-8      	; 0x566 <PIN_MODE+0x46>
 56e:	80 95       	com	r24
 570:	83 23       	and	r24, r19
 572:	8a bb       	out	0x1a, r24	; 26
			break;
 574:	08 95       	ret
			case 1:
			CLR_BIT(DDRB,pin);
 576:	37 b3       	in	r19, 0x17	; 23
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <PIN_MODE+0x62>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	2a 95       	dec	r18
 584:	e2 f7       	brpl	.-8      	; 0x57e <PIN_MODE+0x5e>
 586:	80 95       	com	r24
 588:	83 23       	and	r24, r19
 58a:	87 bb       	out	0x17, r24	; 23
			break;
 58c:	08 95       	ret
			case 2:
			CLR_BIT(DDRC,pin);
 58e:	34 b3       	in	r19, 0x14	; 20
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <PIN_MODE+0x7a>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	2a 95       	dec	r18
 59c:	e2 f7       	brpl	.-8      	; 0x596 <PIN_MODE+0x76>
 59e:	80 95       	com	r24
 5a0:	83 23       	and	r24, r19
 5a2:	84 bb       	out	0x14, r24	; 20
			break;
 5a4:	08 95       	ret
			case 3:
			CLR_BIT(DDRD,pin);
 5a6:	31 b3       	in	r19, 0x11	; 17
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <PIN_MODE+0x92>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	2a 95       	dec	r18
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <PIN_MODE+0x8e>
 5b6:	80 95       	com	r24
 5b8:	83 23       	and	r24, r19
 5ba:	81 bb       	out	0x11, r24	; 17
			break;
 5bc:	08 95       	ret
			default:
			break;
		}
		break;
		case OUTPUT:
		switch(port)
 5be:	91 30       	cpi	r25, 0x01	; 1
 5c0:	89 f0       	breq	.+34     	; 0x5e4 <PIN_MODE+0xc4>
 5c2:	28 f0       	brcs	.+10     	; 0x5ce <PIN_MODE+0xae>
 5c4:	92 30       	cpi	r25, 0x02	; 2
 5c6:	c9 f0       	breq	.+50     	; 0x5fa <PIN_MODE+0xda>
 5c8:	93 30       	cpi	r25, 0x03	; 3
 5ca:	11 f1       	breq	.+68     	; 0x610 <PIN_MODE+0xf0>
 5cc:	08 95       	ret
		{
			case 0:
			SET_BIT(DDRA,pin);
 5ce:	3a b3       	in	r19, 0x1a	; 26
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <PIN_MODE+0xba>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	2a 95       	dec	r18
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <PIN_MODE+0xb6>
 5de:	83 2b       	or	r24, r19
 5e0:	8a bb       	out	0x1a, r24	; 26
			break;
 5e2:	08 95       	ret
			case 1:
			SET_BIT(DDRB,pin);
 5e4:	37 b3       	in	r19, 0x17	; 23
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <PIN_MODE+0xd0>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	2a 95       	dec	r18
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <PIN_MODE+0xcc>
 5f4:	83 2b       	or	r24, r19
 5f6:	87 bb       	out	0x17, r24	; 23
			break;
 5f8:	08 95       	ret
			case 2:
			SET_BIT(DDRC,pin);
 5fa:	34 b3       	in	r19, 0x14	; 20
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <PIN_MODE+0xe6>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	2a 95       	dec	r18
 608:	e2 f7       	brpl	.-8      	; 0x602 <PIN_MODE+0xe2>
 60a:	83 2b       	or	r24, r19
 60c:	84 bb       	out	0x14, r24	; 20
			break;
 60e:	08 95       	ret
			case 3:
			SET_BIT(DDRD,pin);
 610:	31 b3       	in	r19, 0x11	; 17
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <PIN_MODE+0xfc>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	2a 95       	dec	r18
 61e:	e2 f7       	brpl	.-8      	; 0x618 <PIN_MODE+0xf8>
 620:	83 2b       	or	r24, r19
 622:	81 bb       	out	0x11, r24	; 17
 624:	08 95       	ret

00000626 <PIN_WRITE>:
	}
}

 void PIN_WRITE(u8 x,u8 state)
{
	u8 pin  = x % 10;
 626:	9d ec       	ldi	r25, 0xCD	; 205
 628:	89 9f       	mul	r24, r25
 62a:	91 2d       	mov	r25, r1
 62c:	11 24       	eor	r1, r1
 62e:	29 2f       	mov	r18, r25
 630:	26 95       	lsr	r18
 632:	26 95       	lsr	r18
 634:	26 95       	lsr	r18
 636:	22 0f       	add	r18, r18
 638:	32 2f       	mov	r19, r18
 63a:	33 0f       	add	r19, r19
 63c:	33 0f       	add	r19, r19
 63e:	23 0f       	add	r18, r19
 640:	82 1b       	sub	r24, r18
 642:	28 2f       	mov	r18, r24
	u8 port = x / 10;
 644:	96 95       	lsr	r25
 646:	96 95       	lsr	r25
 648:	96 95       	lsr	r25
	switch(state)
 64a:	66 23       	and	r22, r22
 64c:	19 f0       	breq	.+6      	; 0x654 <PIN_WRITE+0x2e>
 64e:	61 30       	cpi	r22, 0x01	; 1
 650:	c9 f1       	breq	.+114    	; 0x6c4 <PIN_WRITE+0x9e>
 652:	08 95       	ret
	{
		case LOW:
		switch(port)
 654:	91 30       	cpi	r25, 0x01	; 1
 656:	91 f0       	breq	.+36     	; 0x67c <PIN_WRITE+0x56>
 658:	28 f0       	brcs	.+10     	; 0x664 <PIN_WRITE+0x3e>
 65a:	92 30       	cpi	r25, 0x02	; 2
 65c:	d9 f0       	breq	.+54     	; 0x694 <PIN_WRITE+0x6e>
 65e:	93 30       	cpi	r25, 0x03	; 3
 660:	29 f1       	breq	.+74     	; 0x6ac <PIN_WRITE+0x86>
 662:	08 95       	ret
		{
			case 0:
			CLR_BIT(PORTA,pin);
 664:	3b b3       	in	r19, 0x1b	; 27
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <PIN_WRITE+0x4a>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	2a 95       	dec	r18
 672:	e2 f7       	brpl	.-8      	; 0x66c <PIN_WRITE+0x46>
 674:	80 95       	com	r24
 676:	83 23       	and	r24, r19
 678:	8b bb       	out	0x1b, r24	; 27
			break;
 67a:	08 95       	ret
			case 1:
			CLR_BIT(PORTB,pin);
 67c:	38 b3       	in	r19, 0x18	; 24
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <PIN_WRITE+0x62>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	2a 95       	dec	r18
 68a:	e2 f7       	brpl	.-8      	; 0x684 <PIN_WRITE+0x5e>
 68c:	80 95       	com	r24
 68e:	83 23       	and	r24, r19
 690:	88 bb       	out	0x18, r24	; 24
			break;
 692:	08 95       	ret
			case 2:
			CLR_BIT(PORTC,pin);
 694:	35 b3       	in	r19, 0x15	; 21
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <PIN_WRITE+0x7a>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	2a 95       	dec	r18
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <PIN_WRITE+0x76>
 6a4:	80 95       	com	r24
 6a6:	83 23       	and	r24, r19
 6a8:	85 bb       	out	0x15, r24	; 21
			break;
 6aa:	08 95       	ret
			case 3:
			CLR_BIT(PORTD,pin);
 6ac:	32 b3       	in	r19, 0x12	; 18
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <PIN_WRITE+0x92>
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	2a 95       	dec	r18
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <PIN_WRITE+0x8e>
 6bc:	80 95       	com	r24
 6be:	83 23       	and	r24, r19
 6c0:	82 bb       	out	0x12, r24	; 18
			break;
 6c2:	08 95       	ret
			default:
			break;
		}
		break;
		case HIGH:
		switch(port)
 6c4:	91 30       	cpi	r25, 0x01	; 1
 6c6:	89 f0       	breq	.+34     	; 0x6ea <PIN_WRITE+0xc4>
 6c8:	28 f0       	brcs	.+10     	; 0x6d4 <PIN_WRITE+0xae>
 6ca:	92 30       	cpi	r25, 0x02	; 2
 6cc:	c9 f0       	breq	.+50     	; 0x700 <PIN_WRITE+0xda>
 6ce:	93 30       	cpi	r25, 0x03	; 3
 6d0:	11 f1       	breq	.+68     	; 0x716 <PIN_WRITE+0xf0>
 6d2:	08 95       	ret
		{
			case 0:
			SET_BIT(PORTA,pin);
 6d4:	3b b3       	in	r19, 0x1b	; 27
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <PIN_WRITE+0xba>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	2a 95       	dec	r18
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <PIN_WRITE+0xb6>
 6e4:	83 2b       	or	r24, r19
 6e6:	8b bb       	out	0x1b, r24	; 27
			break;
 6e8:	08 95       	ret
			case 1:
			SET_BIT(PORTB,pin);
 6ea:	38 b3       	in	r19, 0x18	; 24
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <PIN_WRITE+0xd0>
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	2a 95       	dec	r18
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <PIN_WRITE+0xcc>
 6fa:	83 2b       	or	r24, r19
 6fc:	88 bb       	out	0x18, r24	; 24
			break;
 6fe:	08 95       	ret
			case 2:
			SET_BIT(PORTC,pin);
 700:	35 b3       	in	r19, 0x15	; 21
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <PIN_WRITE+0xe6>
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	2a 95       	dec	r18
 70e:	e2 f7       	brpl	.-8      	; 0x708 <PIN_WRITE+0xe2>
 710:	83 2b       	or	r24, r19
 712:	85 bb       	out	0x15, r24	; 21
			break;
 714:	08 95       	ret
			case 3:
			SET_BIT(PORTD,pin);
 716:	32 b3       	in	r19, 0x12	; 18
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <PIN_WRITE+0xfc>
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	2a 95       	dec	r18
 724:	e2 f7       	brpl	.-8      	; 0x71e <PIN_WRITE+0xf8>
 726:	83 2b       	or	r24, r19
 728:	82 bb       	out	0x12, r24	; 18
 72a:	08 95       	ret

0000072c <I2C_INIT>:

void I2C_INIT(void)
{
	#if   I2C_MODE   ==   MASTER
	/* to select 400 k hz I2C frequancy*/
	TWBR = 12;
 72c:	8c e0       	ldi	r24, 0x0C	; 12
 72e:	80 b9       	out	0x00, r24	; 0
	#elif I2C_MODE   ==   SLAVE
	/*to select slave address = 0000001 and enable rec byte from broadcast*/
	TWAR = 0b00000011;
	#endif
	/*to enable I2C circuit*/
	SET_BIT(TWCR,2);
 730:	86 b7       	in	r24, 0x36	; 54
 732:	84 60       	ori	r24, 0x04	; 4
 734:	86 bf       	out	0x36, r24	; 54
 736:	08 95       	ret

00000738 <I2C_START_CONDITION>:
}
void I2C_START_CONDITION(void)
{
	SET_BIT(TWCR,5);
 738:	86 b7       	in	r24, 0x36	; 54
 73a:	80 62       	ori	r24, 0x20	; 32
 73c:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,7);    // to enable clearing this bit
 73e:	86 b7       	in	r24, 0x36	; 54
 740:	80 68       	ori	r24, 0x80	; 128
 742:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR,7) == 0);
 744:	06 b6       	in	r0, 0x36	; 54
 746:	07 fe       	sbrs	r0, 7
 748:	fd cf       	rjmp	.-6      	; 0x744 <I2C_START_CONDITION+0xc>
	while((TWSR & 0xF8) != START_ACK);
 74a:	81 b1       	in	r24, 0x01	; 1
 74c:	88 7f       	andi	r24, 0xF8	; 248
 74e:	88 30       	cpi	r24, 0x08	; 8
 750:	e1 f7       	brne	.-8      	; 0x74a <I2C_START_CONDITION+0x12>
}
 752:	08 95       	ret

00000754 <I2C_SEND_SLAVE_ADDRESS_WRITE>:
void I2C_SEND_SLAVE_ADDRESS_WRITE(u8 address) 
{
	TWDR = (address << 1);
 754:	88 0f       	add	r24, r24
 756:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWCR,7);    // to enable clearing this bit
 758:	86 b7       	in	r24, 0x36	; 54
 75a:	80 68       	ori	r24, 0x80	; 128
 75c:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR,7) == 0);
 75e:	06 b6       	in	r0, 0x36	; 54
 760:	07 fe       	sbrs	r0, 7
 762:	fd cf       	rjmp	.-6      	; 0x75e <I2C_SEND_SLAVE_ADDRESS_WRITE+0xa>
	while((TWSR & 0xF8) != SLAVE_AD_AND_WR_ACK);
 764:	81 b1       	in	r24, 0x01	; 1
 766:	88 7f       	andi	r24, 0xF8	; 248
 768:	88 31       	cpi	r24, 0x18	; 24
 76a:	e1 f7       	brne	.-8      	; 0x764 <I2C_SEND_SLAVE_ADDRESS_WRITE+0x10>
}
 76c:	08 95       	ret

0000076e <I2C_SEND_SLAVE_ADDRESS_READ>:
void I2C_SEND_SLAVE_ADDRESS_READ(u8 address)
{
	TWDR = ((address << 1) | (0x01));
 76e:	88 0f       	add	r24, r24
 770:	81 60       	ori	r24, 0x01	; 1
 772:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWCR,7);                 // to clear flag
 774:	86 b7       	in	r24, 0x36	; 54
 776:	80 68       	ori	r24, 0x80	; 128
 778:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR,7) == 0);
 77a:	06 b6       	in	r0, 0x36	; 54
 77c:	07 fe       	sbrs	r0, 7
 77e:	fd cf       	rjmp	.-6      	; 0x77a <I2C_SEND_SLAVE_ADDRESS_READ+0xc>
	while((TWSR & 0xF8) != SLAVE_AD_AND_RD_ACK);
 780:	81 b1       	in	r24, 0x01	; 1
 782:	88 7f       	andi	r24, 0xF8	; 248
 784:	80 34       	cpi	r24, 0x40	; 64
 786:	e1 f7       	brne	.-8      	; 0x780 <I2C_SEND_SLAVE_ADDRESS_READ+0x12>
}
 788:	08 95       	ret

0000078a <I2C_SEND_BYTE>:
void I2C_SEND_BYTE(u8 byte)
{
	TWDR = byte;
 78a:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR,5);
 78c:	86 b7       	in	r24, 0x36	; 54
 78e:	8f 7d       	andi	r24, 0xDF	; 223
 790:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,7);    // to enable clearing this bit
 792:	86 b7       	in	r24, 0x36	; 54
 794:	80 68       	ori	r24, 0x80	; 128
 796:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR,7) == 0);
 798:	06 b6       	in	r0, 0x36	; 54
 79a:	07 fe       	sbrs	r0, 7
 79c:	fd cf       	rjmp	.-6      	; 0x798 <I2C_SEND_BYTE+0xe>
	while((TWSR & 0xF8) != WR_BYTE_ACK);
 79e:	81 b1       	in	r24, 0x01	; 1
 7a0:	88 7f       	andi	r24, 0xF8	; 248
 7a2:	88 32       	cpi	r24, 0x28	; 40
 7a4:	e1 f7       	brne	.-8      	; 0x79e <I2C_SEND_BYTE+0x14>
}
 7a6:	08 95       	ret

000007a8 <I2C_REC_BYTE>:
u8   I2C_REC_BYTE(void)
{
	u8 data = 0;
	CLR_BIT(TWCR,5);
 7a8:	86 b7       	in	r24, 0x36	; 54
 7aa:	8f 7d       	andi	r24, 0xDF	; 223
 7ac:	86 bf       	out	0x36, r24	; 54
	CLR_BIT(TWCR,4);
 7ae:	86 b7       	in	r24, 0x36	; 54
 7b0:	8f 7e       	andi	r24, 0xEF	; 239
 7b2:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,6);
 7b4:	86 b7       	in	r24, 0x36	; 54
 7b6:	80 64       	ori	r24, 0x40	; 64
 7b8:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,7);                 // to clear flag
 7ba:	86 b7       	in	r24, 0x36	; 54
 7bc:	80 68       	ori	r24, 0x80	; 128
 7be:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR,7) == 0);
 7c0:	06 b6       	in	r0, 0x36	; 54
 7c2:	07 fe       	sbrs	r0, 7
 7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <I2C_REC_BYTE+0x18>
	while((TWSR & 0xF8) != RD_BYTE_WITH_ACK);
 7c6:	81 b1       	in	r24, 0x01	; 1
 7c8:	88 7f       	andi	r24, 0xF8	; 248
 7ca:	80 35       	cpi	r24, 0x50	; 80
 7cc:	e1 f7       	brne	.-8      	; 0x7c6 <I2C_REC_BYTE+0x1e>
	data = TWDR;
 7ce:	83 b1       	in	r24, 0x03	; 3
	return data;
}
 7d0:	08 95       	ret

000007d2 <I2C_REPEATED_START>:
void I2C_REPEATED_START(void)
{
	SET_BIT(TWCR,5);                 // to make start condition
 7d2:	86 b7       	in	r24, 0x36	; 54
 7d4:	80 62       	ori	r24, 0x20	; 32
 7d6:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,7);                 // to clear flag
 7d8:	86 b7       	in	r24, 0x36	; 54
 7da:	80 68       	ori	r24, 0x80	; 128
 7dc:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR,7) == 0);
 7de:	06 b6       	in	r0, 0x36	; 54
 7e0:	07 fe       	sbrs	r0, 7
 7e2:	fd cf       	rjmp	.-6      	; 0x7de <I2C_REPEATED_START+0xc>
	while((TWSR&0xF8) != REP_START_ACK);
 7e4:	81 b1       	in	r24, 0x01	; 1
 7e6:	88 7f       	andi	r24, 0xF8	; 248
 7e8:	80 31       	cpi	r24, 0x10	; 16
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <I2C_REPEATED_START+0x12>
}
 7ec:	08 95       	ret

000007ee <I2C_STOP_CONDITION>:
void I2C_STOP_CONDITION(void)
{
	SET_BIT(TWCR,4);
 7ee:	86 b7       	in	r24, 0x36	; 54
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,7);
 7f4:	86 b7       	in	r24, 0x36	; 54
 7f6:	80 68       	ori	r24, 0x80	; 128
 7f8:	86 bf       	out	0x36, r24	; 54
 7fa:	08 95       	ret

000007fc <__tablejump2__>:
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	05 90       	lpm	r0, Z+
 802:	f4 91       	lpm	r31, Z
 804:	e0 2d       	mov	r30, r0
 806:	09 94       	ijmp

00000808 <_exit>:
 808:	f8 94       	cli

0000080a <__stop_program>:
 80a:	ff cf       	rjmp	.-2      	; 0x80a <__stop_program>
